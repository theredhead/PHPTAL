<?php

if (!defined('PHPTAL_PHP_CODE_DESTINATION')){
    define('PHPTAL_PHP_CODE_DESTINATION', '/tmp/');
}
define('PHPTAL_VERSION', '1_0_0');


require_once 'PHPTAL/RepeatController.php';


/**
 * PHPTAL template entry point.
 * 
 * <code>
 * <?php
 * require_once 'PHPTAL.php';
 * try {
 *      $tpl = new PHPTAL('mytemplate.html');
 *      $tpl->title = 'Welcome here';
 *      $tpl->result = range(1, 100);
 *      ...
 *      echo $tpl->execute();
 * }
 * catch (Exception $e) {
 *      echo $e;
 * }
 * ?>
 * </code>
 * 
 * @author Laurent Bedubourg <lbedubourg@motion-twin.com>
 * @package PHPTAL
 */
class PHPTAL 
{
    public $errors = array();
    public $repeat;
    public $slots = array();
    public $slotsStack = array();
    
    public function __construct($path)
    {
        $this->_realPath = $path;
        $this->_repositories = array();
        if (defined('PHPTAL_TEMPLATE_REPOSITORY')){
            $this->_repositories[] = PHPTAL_TEMPLATE_REPOSITORY;
        }
        $this->repeat = new PHPTAL_RepeatController();
    }

    public function setTemplateRepository( $rep )
    {
        if (is_array($rep)){
            $this->_repositories = $rep;
        }
        else {
            $this->_repositories[] = $rep;
        }
    }
    
    public function execute() 
    {
        if (!$this->_prepared) $this->prepare();
        $this->repeat = new PHPTAL_RepeatController();
        require_once $this->_codeFile;
        $templateFunction = $this->_functionName;
        $res = $templateFunction($this);
        return $this->_docType . $res;
    }

    public function executeMacro($path)
    {
        if (preg_match('/^(.*?)\/([a-z0-9_]*?)$/', $path, $m)){
            list(,$file,$macroName) = $m;
        }

        if (file_exists(dirname($this->_realPath).'/'.$file)){
            $file = dirname($this->_realPath).'/'.$file;
        }
        
        $tpl = new PHPTAL( $file );
        $tpl->prepare();
        require_once $tpl->getCodePath();
        $fun = $tpl->getFunctionName() . '_' . $macroName;
        $fun( $this );
    }

    public function prepare()
    {
        $this->_codeFile = PHPTAL_PHP_CODE_DESTINATION . $this->getFunctionName() . '.php';
        if (defined('PHPTAL_FORCE_REPARSE') ||
            !file_exists($this->_codeFile) || 
            filemtime($this->_codeFile) < filemtime($this->_realPath)) {
            $this->parse();
        }
        $this->_prepared = true;
    }

    public function getCodePath()
    {
        return $this->_codeFile;
    }

    public function getFunctionName()
    {
        if (!$this->_functionName) {
            $this->_functionName = "tpl_" .PHPTAL_VERSION. md5($this->_realPath);
        }
        return $this->_functionName;
    }

    public function setDocType($doctype)
    {
        if (!$this->_docType){
            $this->_docType = $doctype;
        }
    }
    
    private function parse()
    {
        require_once 'PHPTAL/Parser.php';
        require_once 'PHPTAL/CodeGenerator.php';
        $generator = new PHPTAL_CodeGenerator();
        $parser = new PHPTAL_Parser($generator);
        $tree = $parser->parseFile($this->_realPath);

        $header = sprintf('Generated by PHPTAL from %s', $this->_realPath);
        $generator->doFunction($this->_functionName, '$tpl');
        $generator->doComment( $header );
        $generator->setFunctionPrefix($this->_functionName . "_");
        $generator->pushCode('ob_start()');
        $tree->generate();
        $generator->pushCode('$_result_ = ob_get_contents()');
        $generator->pushCode('ob_end_clean()');
        $generator->pushCode('return $_result_');
        $generator->doEnd();
        $this->storeGeneratedCode( $generator->getResult() );
    }

    private function storeGeneratedCode($code)
    {
        $fp = @fopen($this->_codeFile, "w");
        if (!$fp) {
            throw new Exception($php_errormsg);
        }
        fwrite($fp, $code);
        fclose($fp);
    }

    private function findTemplate()
    {
        $path = $this->_realPath;
        if (file_exists($path)) return;
        foreach ($this->_repositories as $repository){
            if (file_exists("$repository/$this->_realPath")){
                $this->_realPath = "$repository/$this->_realPath";
                return;
            }
        }
        $err = 'Unable to locate template file %s';
        $err = sprintf($err, $this->_realPath);
        throw new Exception($err);
    }

    private $_codeFile;
    private $_realPath;
    private $_functionName;
    private $_prepared = false;
    private $_repositories = array();
    private $_docType = '';
}


function phptal_path( $base, $path, $nothrow=false )
{
    if ($path == '') 
        return $base;
    
    $parts   = split('/', $path);
    $current = array_shift($parts);
    $path    = join('/', $parts);
    
    if (is_object($base)) {
        if (method_exists($base, $current))
            return phptal_path($base->$current(), $path);
            
        if (isset($base->$current))
            return phptal_path($base->$current, $path);

        if ($nothrow)
            return null;
        
        throw new Exception("Path not found: $current");
    }
        
    if (is_array($base)) {
        if (array_key_exists($current, $base))
            return phptal_path($base[$current], $path);

        if ($current == 'length')
            return phptal_path(count( $base ), $path);

        if ($current == 'size')
            return phptal_path(count( $base ), $path);

        if ($nothrow)
            return null;

        throw new Exception("Path not found: $current");
    }

    if (is_string($base)) {
        if ($current == 'length' || $current == 'size')
            return phptal_path(strlen($base), $path);

        if ($nothrow)
            return null;

        throw new Exception("Path not found: $current");
    }

    if ($nothrow)
        return null;
    throw new Exception("Path not found: $current");
}

function phptal_repeat_size( $iterable )
{
    if (is_array($iterable)) 
        return count($iterable);
    if (is_string($iterable))
        return strlen($iterable);
    if (is_object($iterable) && method_exists($iterable, 'size')) 
        return $iterable->size();
    if (is_object($iterable) && method_exists($iterable, 'length')) 
        return $iterable->length();
    return 0;
}

?>
